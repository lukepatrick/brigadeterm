// Code generated by mockery v1.0.0
package brigade

import brigade "github.com/Azure/brigade/pkg/brigade"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllProjects provides a mock function with given fields:
func (_m *Repository) GetAllProjects() ([]*brigade.Project, error) {
	ret := _m.Called()

	var r0 []*brigade.Project
	if rf, ok := ret.Get(0).(func() []*brigade.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*brigade.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildJobs provides a mock function with given fields: BuildID
func (_m *Repository) GetBuildJobs(BuildID string) ([]*brigade.Job, error) {
	ret := _m.Called(BuildID)

	var r0 []*brigade.Job
	if rf, ok := ret.Get(0).(func(string) []*brigade.Job); ok {
		r0 = rf(BuildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*brigade.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(BuildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectBuilds provides a mock function with given fields: projectID
func (_m *Repository) GetProjectBuilds(projectID string) ([]*brigade.Build, error) {
	ret := _m.Called(projectID)

	var r0 []*brigade.Build
	if rf, ok := ret.Get(0).(func(string) []*brigade.Build); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*brigade.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
